<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10100.17.0118.2108                               -->
<workbook source-build='10.1.4 (10100.17.0118.2108)' source-platform='win' version='10.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data.world connector' inline='true' name='federated.1x8wxt005nkj401gtv9jb02s3j89' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data.world connector' name='webdata-direct.1mhltu31qa0f7519q2eli01vpg0u'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;conneyc/s-17-dv-project-5&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmNvbm5leWMiLCJpc3MiOiJhZ2VudDpjb25uZXljOjoyYTEyMDNkYS1lM2YzLTRjNWYtODAyMy1jYmFmMmJmMmRjZjkiLCJpYXQiOjE0ODQ2OTcyMTUsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.aQy8F6cDXh9qhvq8i8ZW_6lUpHMEjXm2hfU_zt2kVKPBE_unlANG5RazcIf2Gvp9YZ1VeOuGmgJEw3W2qTHbJQ&quot;}' connectionName='data.world connector' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[Census2015].[v_0]' />
              <expression op='[Natality].[v_0]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.1mhltu31qa0f7519q2eli01vpg0u' name='Census2015' table='[Census2015]' type='table' />
          <relation connection='webdata-direct.1mhltu31qa0f7519q2eli01vpg0u' name='Natality' table='[Natality]' type='table' />
        </relation>
        <cols>
          <map key='[v_0 (Natality)]' value='[Natality].[v_0]' />
          <map key='[v_0]' value='[Census2015].[v_0]' />
          <map key='[v_1 (Natality)]' value='[Natality].[v_1]' />
          <map key='[v_1]' value='[Census2015].[v_1]' />
          <map key='[v_2]' value='[Natality].[v_2]' />
          <map key='[v_3]' value='[Natality].[v_3]' />
          <map key='[v_4]' value='[Natality].[v_4]' />
          <map key='[v_5]' value='[Natality].[v_5]' />
          <map key='[v_6]' value='[Natality].[v_6]' />
          <map key='[v_7]' value='[Natality].[v_7]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[Census2015]</parent-name>
            <remote-alias>AreaName</remote-alias>
            <ordinal>0</ordinal>
            <caption>AreaName</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>1</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[Census2015]</parent-name>
            <remote-alias>Median_Age</remote-alias>
            <ordinal>1</ordinal>
            <caption>Median_Age</caption>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_0 (Natality)]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>2</ordinal>
            <caption>State</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1 (Natality)]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>State_Code</remote-alias>
            <ordinal>3</ordinal>
            <caption>State_Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Gender</remote-alias>
            <ordinal>4</ordinal>
            <caption>Gender</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Gender_Code</remote-alias>
            <ordinal>5</ordinal>
            <caption>Gender_Code</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Race</remote-alias>
            <ordinal>6</ordinal>
            <caption>Race</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_5]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Births</remote-alias>
            <ordinal>7</ordinal>
            <caption>Births</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>1</remote-type>
            <local-name>[v_6]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Average_Birth_Weight</remote-alias>
            <ordinal>8</ordinal>
            <caption>Average_Birth_Weight</caption>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_7</remote-name>
            <remote-type>1</remote-type>
            <local-name>[v_7]</local-name>
            <parent-name>[Natality]</parent-name>
            <remote-alias>Average_Age_Mother</remote-alias>
            <ordinal>9</ordinal>
            <caption>Average_Age_Mother</caption>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculated Difference from Average' datatype='real' name='[Calculation_775745103730778113]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='AVG([v_6])- WINDOW_AVG(AVG([v_6]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='State' datatype='string' name='[v_0 (Natality)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='AreaName' datatype='string' name='[v_0]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='State_Code' datatype='integer' name='[v_1 (Natality)]' role='dimension' type='ordinal' />
      <column caption='Median_Age' datatype='real' name='[v_1]' role='measure' type='quantitative' />
      <column caption='Gender' datatype='string' name='[v_2]' role='dimension' type='nominal' />
      <column caption='Gender_Code' datatype='string' name='[v_3]' role='dimension' type='nominal' />
      <column caption='Race' datatype='string' name='[v_4]' role='dimension' type='nominal' />
      <column caption='Births' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
      <column caption='Average_Birth_Weight' datatype='real' name='[v_6]' role='measure' type='quantitative' />
      <column caption='Average_Age_Mother' datatype='real' name='[v_7]' role='measure' type='quantitative' />
      <column-instance column='[High Median Age]' derivation='InOut' name='[io:High Median Age:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='Low' />
          <alias key='true' value='High' />
        </aliases>
      </column-instance>
      <column-instance column='[Medium Median Age]' derivation='InOut' name='[io:Medium Median Age:nk]' pivot='key' type='nominal' />
      <column-instance column='[v_0 (Natality)]' derivation='None' name='[none:v_0 (Natality):nk]' pivot='key' type='nominal' />
      <column-instance column='[v_4]' derivation='None' name='[none:v_4:nk]' pivot='key' type='nominal' />
      <group name='[High Median Age]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[v_1 (Natality)]' member='9' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='12' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='23' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='33' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='42' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='50' />
          <groupfilter function='member' level='[v_1 (Natality)]' member='54' />
        </groupfilter>
      </group>
      <group name='[Low Median Age]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='member' level='[io:High Median Age:nk]' member='false' />
          <groupfilter function='crossjoin'>
            <groupfilter function='member' level='[io:Medium Median Age:nk]' member='false' />
            <groupfilter function='union'>
              <groupfilter function='member' level='[v_1 (Natality)]' member='2' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='6' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='11' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='16' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='38' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='48' />
              <groupfilter function='member' level='[v_1 (Natality)]' member='49' />
            </groupfilter>
          </groupfilter>
        </groupfilter>
      </group>
      <group name='[Medium Median Age]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='member' level='[io:High Median Age:nk]' member='false' />
          <groupfilter function='union'>
            <groupfilter function='member' level='[v_1 (Natality)]' member='1' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='4' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='5' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='8' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='10' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='15' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='17' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='18' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='19' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='21' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='22' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='24' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='25' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='26' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='27' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='28' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='29' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='30' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='31' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='32' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='34' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='35' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='36' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='37' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='39' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='40' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='41' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='44' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='45' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='46' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='47' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='51' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='53' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='55' />
            <groupfilter function='member' level='[v_1 (Natality)]' member='56' />
          </groupfilter>
        </groupfilter>
      </group>
      <group caption='High and Low Median Age' delimiter=',' name='[Set 1]' name-style='unqualified'>
        <groupfilter function='union'>
          <groupfilter function='crossjoin'>
            <groupfilter function='crossjoin'>
              <groupfilter field='[High Median Age]' function='reference' />
              <groupfilter function='hierarchy-members' hierarchy='[io:High Median Age:nk]' />
            </groupfilter>
            <groupfilter function='hierarchy-members' hierarchy='[io:Medium Median Age:nk]' />
          </groupfilter>
          <groupfilter function='reorder-dimensionality'>
            <groupfilter field='[Low Median Age]' function='reference' />
            <order>
              <hierarchy name='[v_1 (Natality)]' />
              <hierarchy name='[io:High Median Age:nk]' />
              <hierarchy name='[io:Medium Median Age:nk]' />
            </order>
          </groupfilter>
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\Users\Conney\Documents\我的 Tableau 存储库\数据源\extract_0tcgekg0c0zz6h1dv0d4u1pzijzd.tde' schema='Extract' tablename='Extract' update-time='04/20/2017 09:23:54 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[v_0 (Natality)]' value='[Extract].[v_0]' />
            <map key='[v_0]' value='[Extract].[v_01]' />
            <map key='[v_1 (Natality)]' value='[Extract].[v_1]' />
            <map key='[v_1]' value='[Extract].[v_11]' />
            <map key='[v_2]' value='[Extract].[v_2]' />
            <map key='[v_3]' value='[Extract].[v_3]' />
            <map key='[v_4]' value='[Extract].[v_4]' />
            <map key='[v_5]' value='[Extract].[v_5]' />
            <map key='[v_6]' value='[Extract].[v_6]' />
            <map key='[v_7]' value='[Extract].[v_7]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='404' timestamp-start='2017-04-20 21:23:54.057' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_0 (Natality)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>0</ordinal>
              <family>Natality</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Alabama&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Wyoming&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_01</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_01</remote-alias>
              <ordinal>1</ordinal>
              <family>Census2015</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Alabama&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Wyoming&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>16</remote-type>
              <local-name>[v_1 (Natality)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>2</ordinal>
              <family>Natality</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>11734.0</statistic>
                <statistic aggregation='Avg' datatype='real'>29.044554455445546</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>56</statistic>
                <statistic aggregation='Stdev' datatype='real'>15.659306845068047</statistic>
                <statistic aggregation='StdevP' datatype='real'>15.639914507170078</statistic>
                <statistic aggregation='Var' datatype='real'>245.21389086799499</statistic>
                <statistic aggregation='VarP' datatype='real'>244.60692579158905</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>439630.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>5</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>3</ordinal>
              <family>Census2015</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>40</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>15290.899999999998</statistic>
                <statistic aggregation='Avg' datatype='real'>37.848762376237616</statistic>
                <statistic aggregation='Min' datatype='real'>30.100000000000001</statistic>
                <statistic aggregation='Max' datatype='real'>43.799999999999997</statistic>
                <statistic aggregation='Stdev' datatype='real'>2.3772752618158943</statistic>
                <statistic aggregation='StdevP' datatype='real'>2.3743312665541798</statistic>
                <statistic aggregation='Var' datatype='real'>5.6514376704418288</statistic>
                <statistic aggregation='VarP' datatype='real'>5.6374489633367748</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>581019.16999999981</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>4</ordinal>
              <family>Natality</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Female&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Male&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;Male&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>5</ordinal>
              <family>Natality</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;F&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;M&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;M&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>6</ordinal>
              <family>Natality</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;American Indian or Alaska Native&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;White&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_5</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_5]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_5</remote-alias>
              <ordinal>7</ordinal>
              <family>Natality</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>375</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>3978467.0</statistic>
                <statistic aggregation='Avg' datatype='real'>9847.6905940594061</statistic>
                <statistic aggregation='Min' datatype='integer'>11</statistic>
                <statistic aggregation='Max' datatype='integer'>193190</statistic>
                <statistic aggregation='Stdev' datatype='real'>21662.507117624958</statistic>
                <statistic aggregation='StdevP' datatype='real'>21635.680473131786</statistic>
                <statistic aggregation='Var' datatype='real'>469264214.62115198</statistic>
                <statistic aggregation='VarP' datatype='real'>468102669.53545606</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>228292190547.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_6</remote-name>
              <remote-type>5</remote-type>
              <local-name>[v_6]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_6</remote-alias>
              <ordinal>8</ordinal>
              <family>Natality</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>399</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>1305683.8100000003</statistic>
                <statistic aggregation='Avg' datatype='real'>3231.8906188118817</statistic>
                <statistic aggregation='Min' datatype='real'>2876.4499999999998</statistic>
                <statistic aggregation='Max' datatype='real'>3535.0900000000001</statistic>
                <statistic aggregation='Stdev' datatype='real'>118.32396824562495</statistic>
                <statistic aggregation='StdevP' datatype='real'>118.17743695938412</statistic>
                <statistic aggregation='Var' datatype='real'>14000.561461391664</statistic>
                <statistic aggregation='VarP' datatype='real'>13965.906606289209</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>4225469482.9424977</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_7</remote-name>
              <remote-type>5</remote-type>
              <local-name>[v_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_7</remote-alias>
              <ordinal>9</ordinal>
              <family>Natality</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>280</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>11417.310000000007</statistic>
                <statistic aggregation='Avg' datatype='real'>28.260668316831701</statistic>
                <statistic aggregation='Min' datatype='real'>24.82</statistic>
                <statistic aggregation='Max' datatype='real'>33.049999999999997</statistic>
                <statistic aggregation='Stdev' datatype='real'>1.7436611318757855</statistic>
                <statistic aggregation='StdevP' datatype='real'>1.7415017983763248</statistic>
                <statistic aggregation='Var' datatype='real'>3.0403541428143455</statistic>
                <statistic aggregation='VarP' datatype='real'>3.0328285137479734</statistic>
                <statistic aggregation='Count' datatype='integer'>404</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>323886.07370000012</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.564417' group-percentage='0.242331' measure-ordering='alphabetic' measure-percentage='0.193252' show-aliased-fields='true' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:v_4:nk]&#10;[none:v_0 (Natality):nk]' type='palette'>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;Connecticut&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;Florida&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;Maine&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;New Hampshire&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;Pennsylvania&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;Vermont&quot;</bucket>
              </multibucket>
            </map>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
                <bucket>&quot;West Virginia&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;Connecticut&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;Florida&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;Maine&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;New Hampshire&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;Pennsylvania&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;Vermont&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Black or African American&quot;</bucket>
                <bucket>&quot;West Virginia&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;Connecticut&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;Florida&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;Maine&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;New Hampshire&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;Pennsylvania&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;Vermont&quot;</bucket>
              </multibucket>
            </map>
            <map to='#b6992d'>
              <multibucket>
                <bucket>&quot;White&quot;</bucket>
                <bucket>&quot;West Virginia&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;Connecticut&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;Florida&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;Maine&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;New Hampshire&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;Pennsylvania&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;Vermont&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
                <bucket>&quot;West Virginia&quot;</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:v_4:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;American Indian or Alaska Native&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;White&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Black or African American&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Asian or Pacific Islander&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:High Median Age:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#e15759'>
              <bucket>false</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='High Median Age States' />
      <command command='tsc:brush'>
        <param name='field-captions' value='IN/OUT(High Median Age)' />
        <param name='target' value='High Median Age States' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Barchart'>
      <table>
        <view>
          <datasources>
            <datasource caption='data.world connector' name='federated.1x8wxt005nkj401gtv9jb02s3j89' />
          </datasources>
          <datasource-dependencies datasource='federated.1x8wxt005nkj401gtv9jb02s3j89'>
            <column-instance column='[v_6]' derivation='Avg' name='[avg:v_6:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_0 (Natality)]' derivation='None' name='[none:v_0 (Natality):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_4]' derivation='None' name='[none:v_4:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[v_0 (Natality)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Race' datatype='string' name='[v_4]' role='dimension' type='nominal' />
            <column caption='Average_Birth_Weight' datatype='real' name='[v_6]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='text-format' id='refline0' value='n#,##0.00&quot; g&quot;;-#,##0.00&quot; g&quot;' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
            <format attr='text-align' id='refline0' value='left' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='value' probability='95' scope='per-pane' value-column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>([federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_0 (Natality):nk] / [federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_4:nk])</rows>
        <cols>[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='High Median Age States'>
      <layout-options>
        <title>
          <formatted-text>
            <run>High and Low Median Age States</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data.world connector' name='federated.1x8wxt005nkj401gtv9jb02s3j89' />
          </datasources>
          <datasource-dependencies datasource='federated.1x8wxt005nkj401gtv9jb02s3j89'>
            <column-instance column='[v_1]' derivation='Avg' name='[avg:v_1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[High Median Age]' derivation='InOut' name='[io:High Median Age:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='Low' />
                <alias key='true' value='High' />
              </aliases>
            </column-instance>
            <column-instance column='[Medium Median Age]' derivation='InOut' name='[io:Medium Median Age:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_0 (Natality)]' derivation='None' name='[none:v_0 (Natality):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_5]' derivation='Sum' name='[sum:v_5:qk]' pivot='key' type='quantitative' />
            <column caption='State' datatype='string' name='[v_0 (Natality)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column aggregation='Sum' caption='State_Code' datatype='integer' name='[v_1 (Natality)]' role='dimension' type='ordinal' />
            <column caption='Median_Age' datatype='real' name='[v_1]' role='measure' type='quantitative' />
            <column caption='Births' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[Set 1]' />
          <slices>
            <column>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Set 1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='n#,##0.00&quot; yrs old&quot;;-#,##0.00&quot; yrs old&quot;' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='true' />
            <format attr='break-on-special' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='true' />
            <format attr='show-null-value-warning' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='true' />
            <format attr='band-size' scope='cols' value='0' />
            <format attr='alternate-text' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='' />
            <format attr='display-alternate-text' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:High Median Age:nk]' value='Median Age' />
          </style-rule>
          <style-rule element='axis-title'>
            <format attr='color' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='#000000' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:High Median Age:nk]' />
              <text column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1x8wxt005nkj401gtv9jb02s3j89].[sum:v_5:qk]</rows>
        <cols>[federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_0 (Natality):nk]</cols>
      </table>
    </worksheet>
    <worksheet name='ID Sets'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>Sheet Name</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>Page Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data.world connector' name='federated.1x8wxt005nkj401gtv9jb02s3j89' />
          </datasources>
          <datasource-dependencies datasource='federated.1x8wxt005nkj401gtv9jb02s3j89'>
            <column-instance column='[v_1]' derivation='Avg' name='[avg:v_1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[High Median Age]' derivation='InOut' name='[io:High Median Age:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='Low' />
                <alias key='true' value='High' />
              </aliases>
            </column-instance>
            <column-instance column='[Medium Median Age]' derivation='InOut' name='[io:Medium Median Age:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_1 (Natality)]' derivation='None' name='[none:v_1 (Natality):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_5]' derivation='Sum' name='[sum:v_5:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='State_Code' datatype='integer' name='[v_1 (Natality)]' role='dimension' type='ordinal' />
            <column caption='Median_Age' datatype='real' name='[v_1]' role='measure' type='quantitative' />
            <column caption='Births' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[Low Median Age]' />
          <slices>
            <column>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Low Median Age]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='width' field='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]' value='60' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[sum:v_5:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_1:qk]</rows>
        <cols>[federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_1 (Natality):ok]</cols>
      </table>
    </worksheet>
    <worksheet name='ID Sets on Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>Sheet Name</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>Page Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data.world connector' name='federated.1x8wxt005nkj401gtv9jb02s3j89' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1x8wxt005nkj401gtv9jb02s3j89'>
            <column-instance column='[High Median Age]' derivation='InOut' name='[io:High Median Age:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='Low' />
                <alias key='true' value='High' />
              </aliases>
            </column-instance>
            <column-instance column='[Medium Median Age]' derivation='InOut' name='[io:Medium Median Age:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_0 (Natality)]' derivation='None' name='[none:v_0 (Natality):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_5]' derivation='Sum' name='[sum:v_5:qk]' pivot='key' type='quantitative' />
            <column caption='State' datatype='string' name='[v_0 (Natality)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column aggregation='Sum' caption='State_Code' datatype='integer' name='[v_1 (Natality)]' role='dimension' type='ordinal' />
            <column caption='Births' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[sum:v_5:qk]' />
              <text column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[sum:v_5:qk]' />
              <lod column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_0 (Natality):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Latitude (generated)]</rows>
        <cols>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:High Median Age:nk]</column>
          <column>[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:Medium Median Age:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Table Calculations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data.world connector' name='federated.1x8wxt005nkj401gtv9jb02s3j89' />
          </datasources>
          <datasource-dependencies datasource='federated.1x8wxt005nkj401gtv9jb02s3j89'>
            <column caption='Calculated Difference from Average' datatype='real' name='[Calculation_775745103730778113]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([v_6])- WINDOW_AVG(AVG([v_6]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[v_6]' derivation='Avg' name='[avg:v_6:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_0 (Natality)]' derivation='None' name='[none:v_0 (Natality):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_4]' derivation='None' name='[none:v_4:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_775745103730778113]' derivation='User' name='[usr:Calculation_775745103730778113:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column caption='State' datatype='string' name='[v_0 (Natality)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Race' datatype='string' name='[v_4]' role='dimension' type='nominal' />
            <column caption='Average_Birth_Weight' datatype='real' name='[v_6]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='text-format' id='refline0' value='n#,##0.00&quot; g&quot;;-#,##0.00&quot; g&quot;' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
            <format attr='wrap' id='refline0' value='auto' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='left' />
            <format attr='vertical-align' id='refline0' value='center' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[usr:Calculation_775745103730778113:qk]' />
              <text column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]' />
              <text column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[usr:Calculation_775745103730778113:qk]' />
            </encodings>
            <reference-line axis-column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='value' probability='95' scope='per-pane' value-column='[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_0 (Natality):nk] / [federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_4:nk])</rows>
        <cols>[federated.1x8wxt005nkj401gtv9jb02s3j89].[avg:v_6:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Barchart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Table Calculations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card pane-specification-id='0' param='[federated.1x8wxt005nkj401gtv9jb02s3j89].[usr:Calculation_775745103730778113:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='ID Sets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
    </window>
    <window class='worksheet' name='ID Sets on Map'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='currpage' />
            <card pane-specification-id='0' param='[federated.1x8wxt005nkj401gtv9jb02s3j89].[sum:v_5:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>true</bucket>
            <bucket>false</bucket>
          </multibucket>
        </current-page>
        <default-map-tool-selection tool='16' />
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='High Median Age States'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:High Median Age:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[High Median Age]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Low Median Age]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[Set 1]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:High Median Age:nk]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[io:Set 1:nk]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_0 (Natality):nk]</field>
            <field>[federated.1x8wxt005nkj401gtv9jb02s3j89].[none:v_1 (Natality):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Barchart' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nOy96XdbV5bo97vzvZgBggQ4zxSpWbLk2a6qHtLV1a9fkn8uWfmQlZW8Txne
      SjrdWd3VVV2Dy5ZkSdZMifMAEiCJeQbunA90eZYtl2SLsPD7RBAHuBsH2Hefs/c+ewu+7/v0
      6fOKIr5sAfr0eZn0FaDPK01fAfq80vQVoM8rTV8B+rzS9BWgzytNXwH6vNL0FaDPK01fAfq8
      0vQVoM8rjfzFB/V6HdM0X5Ysffr86AhfzAXyfZ9+alDvsJ3JogcjL1uMp2LbDooif/fAl4Rt
      O1+2AIIgIAjCp4889jI5xibGMOsV/GAcQzp+xmq1cDUNQz65H+5V4Nc3N/n1vcOXLUZP89Q9
      gFPNsPJkk6OWSyWzTrHr0e206XQtWvk8h/UaXcvG91zarRaW7eA6Nu12G9M0aXc6eJ5Hp92i
      a9r8UIblyZ2PeLSRfebx2ewzjrXbrG7tfeNTq6urVAoHtC33ma/7RfbWb3P97jZgce/eMt80
      NZ1KhUw+/xe9f59n56m38J39GucuzVDKHZIAcDpc++g3HDXgzYun2VlbYdf0uXB6mt/+7gPU
      gWnOD8Cu5dAodoiEZU4tnuXuh3+gJoT5z//p7wgowtMu95fhW3T8AGKzjOsPcOuP12gjE1AE
      QulZhuQGK5kiC+cuUc08oismCBgC3XqBO/ceMzA+h1Xeo2apXDw9xcPHj7EcmStvvknQ93Fc
      l6OdVTayR2jRMWYG4OFaBkeJEAvIyMEuNz7+BCmS4syIxscrOSQtzPuvn8OsF7h1bxkjMcZI
      ROKgVGZq/iyJgEi1pSG7ZVxGsS2bRiHD3cfbjMwsoTRz7BY6nD61gGU2WN/sMBgRefh4i9TM
      aRbGB1/sHL7ifLMF8C32Mjs8frTCbmYfF+jUG0TGZphIiLS6MvNnzzMUUchmDlm6+gaq20aQ
      w1x44wozU9OcXprGOswSn7/IQAAs+y+7W34bnfwWq9tZ1tfXqLRNjPgEY+kEZ85fALPGvXuP
      cK02xUqDWtPm9NIM1VKJo2yGmYtvM50K02i1qB+ssl/sEBmd5/RYkHr382u0ml3OvP42ht9m
      P1/n7XffJxXVaNVKtBs1mqbHzvY67Wad4YUrxI3j123tZDj72lsE3QoHuQKp2SXiIQ2zVWZ1
      bYX99RX2a8dz0qhWcXyP1bUNPNfBdTp0LJsHH99AiiRp16vYrsPq2sYLn8NXnW+0AL7jcvat
      vyIZC1Ep5RF9iEZidA93MMYXGU7FWb9/j8TEIjNJmRt3VplbWCARCaChMDw8iGEIBGcGKDx8
      yMj0Aob64j2u+ZrHr/7h7xBqOYqNNsGQgapIaLKMrocYHRkk3/YxNAV9KIUqiRiGwcBQjFu3
      /kRyZALP8wmEIqiyghTQUSzj+LYgiGiqgioE0RQZw9ARrSof/OkjjMgA0bCB6Ht4gkA4FEZS
      dYK6imkca8B4OsmNGx+ihZKMDwRJRAIIQLtW5Y2//kfSRov1/UMMQ8f3ugiiQljXEEQRwXdx
      fZnXf/5XlDJrEBJAUIgEAxQOcgTjMeqN7rfOTZ9nQ+ifCOtd/of/4w/9TfBz0leAHmY/e0Ak
      lnjZYjwV27ZRFOVli/FUbNt++ia4z8lHVSQiQe1li/FULEtAVdWXLcZTsSyhrwC9zL/d3OD6
      2q2XLcZT8X3/C3Glk4fv+72vALmtx9jBESZTsc/+Z7YboIbRvuen8/06H/z6JoTCvHb1CiFN
      +soIj2ajg6753L75kOnFU8TicTTp8y+5nsshjIwQ/vRxOZ9DCg4Q/ZY7dT2fQ4iPEP6eq4Vm
      2yJXbHy/F/X5Ej2uAB6HpTpiS2BiKMz6w7v4kVGSSgcprrC5/BhCKebTITYzezhSmKX5SUTX
      ZPXJMkpiguGoRq1aQAylGYp2GZy4wMxAicd7RbTmHlJ0lFPjCVYeL6MPjiF0utj1dXI1nVSp
      iBaLUthco+QYXDg1RbdSQRhOUVx9TFOMEhMbSFKEws4yLSnO6Zk0mc0N6q7BhdNT7Kw9IZM5
      5Ox7g+RWHqEkxhkKylTrZYIDo8RP8BLnp0BPK4BT36flR9BqRRrtQdZ3SsyfH6VZKqIEk5Qr
      ZY42domcX6SpDRJsZunYk9T3VhGj43SzK2xWonTQuTysA03WHnxMLqGzdHmQ7d0S20+y6M4k
      cmKKVEzmyd4BCzNjWJEhKG1Qrh1QbcnMzw59JpdnNtnaOyA1GT2O8voOlVKJjZ1N4sm3qFkq
      YbvGVj6DI8eZHnU42nzEytYe4s4R8yMJ3Pgow8bJXT//VOjpdOj9vQKKaOJ6LoWKxUg6wsbG
      Bq4HnVoVVwsxENVxXInEQIKAcXw31TSNYm6XShdU1WBuZgJZOp6KhfNv8Df/zd8QE+vYcoyB
      kI5kGBRzuxSqTQBkWUFVNURBQFY0zEaBTK74uWCSxshQgp3VNbqA59VpdDTS0SCWIBFPxAkZ
      OpIoUs7nyBWqKHqAwcE0pxbmUZUgczOjSOLJXT//VOhpN6htmUiKCp6L4/l0mnVENYihCCDL
      tGo1REXD0FR8SUZwbURZRfBdGvUaghrEUEQESUYSBXzfxbZBVSV8z6VeqyHIGqGgTqNeQ9KC
      KKKAogi4noTg2giqitmsY/oy8UgQ17JAkWnXa3iiRlCXQZToNGp4gkogpIMvIHgugnIsoy8q
      hEIBmrUqSBqGriCr6nfenfpxgOenpxXgVefWgzUazsn1szuOg3yCM4Ydx+krQC+Tz+cZGhr6
      7oEvCcuyTngcwOrtTfCrzv3NIzK3nj0V/MfG81xE8auu5JOD57m9rQBWq8rqxg5KKMHc9DiN
      WpV4PP61cZ1mAzkQRBG/Y1Xt+xQO9wklx9Blj+z2BnpyimTk+7siSwdZ9GSaoPLD/QDW90r9
      PcBz0tNeoFa+hJZK4beKFKptNjY2cGyTVruN6/m4tkW70yGfzdJ2XRzHwYfPDu64no/rOHS7
      Jj7gY/Nk+REH+TLdeo29QhVdPjaVdrfKbq7y6Ws7OK5Lu93Csl1c16HTbmPaDgC+1yWz9Zj1
      3Qq+5356kMik027jeD6ObdHudPE9D8exMa0O+5ksrufSabexHZduu318kMhz6XY6dLrWS53r
      nyo9bQHAZv3RQzQ5wOj88Vpzf/Uu1+5vsfT6W1iHGcRQgojosPLgPkPDM0wNR3n0yXXavoQc
      GsQvZfAjo7x2aQn7aJPEzCWqpRJG16FQKnG4ep/VusdrC3GOSgalzCNsyWBiPM2NP36IkJzm
      7JDPYc3FlkL84q0LdCpl9JHTtEoZ6tk6t3YydKtNhgYN1Ogitd1bZMstrlx5na3dfaYWZmgd
      1bDbR2QrNpNzUyz/8Q8UhAj/8NYkNx+VcQSP//S377/k+f7p0dMWADQuvf0uS8Nxyq0W4FBp
      C1w+v0irWsBTB7h0bhFdkfBdG0lREHyPrq9x+dIFrGaVYGKEKxcXkYHVjT0Odp+wtb1FKDnB
      0unTDMUCnLn8OuloADwHRwpz+dJ5nFqJ2YtXEM0mohHl8tUrDEV0wOdof5ON1RX2dzNULIVT
      Fy6xMDPDxTcvIHdamGKYd955l3hAZGT2DKcmUwDUmzbnL19myKsQmLlM3BDwkFk8f4XpkYGX
      OdE/WXraAgQGQizfvokSHuLSXATDnUHoVtkqWMzNTKOaZT6+84iF6UkuLYQo5St4QojTc6Pc
      uvWQc1eu4LWbiIIA+IwsXOLi0CCNUhFUmcFEAp0IA7oIxJgcE9FdiZs377K4NMf+k3WWziyR
      jBqosszwcAp8CA8v8g/nB3E6FSo1n6CuEx5OI2EwMhVgaMBnde+As+cWGRN1BGTGJ0eJx1Tu
      3L7B6MIZQuYTojPzBKMDqIJMRB1+2dP9k6TvBu1h/t8/3GEl13nZYjwVz/cQhZO7yPB8r68A
      vUw/DvB89OMAPU6+0uKgfnLdoL0QCT650j0DfzZe33Tw4iQfxHhRfHB/tx8HeE5O7gLtGdh8
      8oB6x+TD3/wr2XKLjYcPeLi+hvVpwaraUZZGt03uqPKSJe1zUulpC5COGOyV6kQTUWr1Fo4v
      EHQaXP/wA9T4MBO6j21WuHFjg8tXX8euZKi0PC688TaRk7s07fMj0tMWIJgeorz1iEBqCbu8
      ClIclBBvvP02CQ3azSbh9Bhnz19mIiGytrmHY3dpd+yXLXqfE0JPK4AgxwiIAoMjA4QEGBgf
      JRAMIcsSoVCIYCyGKhuYpR0yFZfJ0SEkzUB/0SUa+/QsfTdoD/M//dcP+I8HRy9bjJ7mSwrQ
      7XZxHOdlytPne1CpVL4x+/Wk0JNu0FfBffhT4cv9HE4evSDflxRA1/UvPPJpNJqEwmFcswuK
      jvwNO4aTHu37KfNf/vU2vz3JSyAfOLm/f/C/xQ3qtQ754+8e8vYv/xZz/QHOzOuMB74+bn19
      nTNnzvyQYn4rOyv3cEJjzI0ln2l8sVgkmXyGsU6X3aMak6Oprz21u7tLIhpCCcbRle/vR8hn
      ljnsxDl/apC11Qzzp2a/9jsx63UqjkM68fTan57nYzve975+n895qgLsZwqcvTJHPlcgCmC3
      ufbHa9RNhdMLwyyvbDN/7gqeY7P66AHJyQnWb96i7Gv87L13CWo/goPJdyk3LUTrCH80wvIn
      d6j7KoZvERmdJyk3ebh5xNmLF2kVd6m1RDRdJB7WuXf3PpGRGezyHnUvxKXFcdY3VmmYCpdf
      u4DmuTTbHSpH+2zu7hJIzjA1IHH3wQqmFCIg+wiawa2bn6AmJ1hMa9xf20MwElw9O4trNbnz
      yT3C6TlSQYFipcTA6CyJoEyh4tCxj/BJUqs1aJay3FveYur0RdRWjtW9KqcX5mg7XbL7WcKG
      wIPlDSaWLjIxeHJ7gvUiT2mQ4bC9s8Xmk3W2djN4gNlu4YoKbusQS4oRDweoVut0agWO6hYh
      r0NTCtBplGn/SKeXrMouR3Wf0mGWqtnFFKIkDJicX6RVzXPr49uYzRIbewW2NnaYnJ2iVCiw
      v7VKauE1JpMh2p0upe0H7B7WsQNpZhJQbn1+jcrRERNnr+A2iqxvZrj05jsMRTQalTztdpuO
      5bH+5BGNch59+DSqc1w7aHNlhakzl3HKO2xvb+FH0sRDGna7SjZfxizmOGwf3727rSaOZ/Pg
      wSNKhSKqJuM4Ng+u/5GuHMFqN3FcmwcPn/wo8/oq8ZQGGSZT599hYiRJbm8XVQAtZFCRRfTx
      WQKKh+v6JKNhAvEzhDWBUgciio8xNomh/jgHofdzVaYnU9AQKZTq6IaBrIoENRlJVIjFwjTR
      SYQNOqkRgp/KFY5GuHvnOpXhEaqNJrou47oCoXAA2azxRfUVJJ1QQKMkiwieyY1r1xHUIJNh
      cFpVqqaHokiAQCgYpFM7ntJELMS9W9cRlCAjsTBjwwkEoF46IJGeIGl0ONw5PtBeK5dxRQ3J
      9zAMna31bSLRUc5cuUpxZw3LsHB8BVnyKR4cEIhH+w0yXhA9HQd4FtG/mCgnCMLnr/F9+PQg
      zNd3agIC/ufN6wQBnpJ49+XHx+/32XU+u8bxewjfIvMXh37x72++zjH/4//5x34y3HPS0wrw
      qrO8to0nf4Nn4oTQk3GAPr3DYCzYPxDzHFiW1bcAvcw//f4OT3Ltly3GU/E8D/G7ajG9RDzP
      630LUD7YwTZSpGLGZ//zfQ8Qv7aO/i58v83Hf7iJF0ly9eIZFOmrb+Dje+D7Ng/v3mdi6Tyx
      gPqltXm7VEIYGODP0jSqJUQ9QlB/eg3PdrWEEB7A+J6+g2yhzvXl/h7geehxBfDZ2TtACnQZ
      ii5QOjoALYLQOkJITOHU86CGGAiplGs1PEFjcCCG4DsU83mkQIywJtHtthDUMEG9SSR1hvHQ
      AcuZCiN6B0GPkIwaFPN55GCY6lEJQypRdiIMHmbwx2eRmgU6rkJ6ME7z8BAhEadbzGMKOnb1
      EDmh0a0VsEWDwUSIWrlM15MZHopTKebJbu8wfD5Gq5hHNKIEVYFut4MaiGCoPf4VnXB6ena9
      TgGCw8hWmbZZ4fe/u8bS628T7pTRIike3v6YfAv+6soiK1UX3WwQuvoW7YMNdkoOXmuL6ECM
      Qt3k/LlzAOys3KcUg9GlEe7f/IhMS+dXb8+yXxUYHZUol2ukEw6CAPV8GXsgQm41w9Do2Ody
      mXU++ugaqflLpLVjD87KvRusZG1++d++y9ZKBsV2cKUpDndLiJZNZW+VmzfvIupxzk0naYhB
      zi+Fn/bR+7wgeloBDnb3OMxW8MwOoeFxLl0+zfbeNkZcxS6ViU4uECzuYdoSk3NzSPk1fB9c
      1yEQiuKYVVw0Tp+bIxpQ8X0YnTnFqaUUTmOf/Ng5Jg736PgeoUiSgH68oUskBxnV06iHDXzf
      RTOCRENf8MbIAc6dO8Pa2haR+TRBt4RvTHF6uEAHkbGpWfR6gaZtEQjFEOliWQ7z568wHA/R
      KVc4d+40wROcSPZToac3wc16DT0UQbA7tByPfGYHJTbMYFBCNAz2NzdRQjEGYxHQAmC1UI0w
      km+xs7mBHB1mMKwiajqqJOH7Js0mhMManmOxtb6OFEwwPjpAZmMDLTFMUJEIByW6jo5gNpCi
      Eap721Rdg1PTI5iNBgR1Drc2cbQ4I4kAgqxzlFnHlcKkxgYRXAHRsRCDOtnNDTwlzPhYiv3N
      dTwtRioRxoiEv/Pu1G+Q8fz0tAK86vz2+kP2Kif3/IbreUgn2Avkev3CWD1NvzDW89EvjNXj
      7BxWeZBpvmwxnorrukjSyW2Q4bo93iDDtU0q1TqiohOLhrBM8yuHeo5xLAtRUT4tgvst+D7t
      dhPVCCEJ0KxXkY3IX5Tc1201kYzjpno/FLdXcv09wHNychdoz0B9f5fV7B4ryw8o1jo8fPjw
      G8cd7GzRcNzvfD8fj5sf/p79fB232+bhowd0Pi2yhd0ke1R7NsF8m+Wbf2Blv/6Mn8ThIHtE
      /2jLj09PWwDwqBZLGGoIXTuOtO6t3uXhxhHzFy7R3Fuh4QcYChl09zbIKwPMjQ2weu8G2Uqb
      wYlFvOIWdaK8/eYFqO0SHT1HpVxCrtbZPyoxsPGIj6ttzs2nKDZCVPcekW/7nFqY4fHd+6iD
      k4wHWmwd1JHCKX7++lnMegVt/AxmYYeGHOX6kzXMjk00KDIwdQW3sEK23OLcmTOsbWyRHBuD
      loVgF3m0mWf2zCJ79+7RVGO8fWaAa5/s4Soa//i3777k+f7p0dMW4LhBxjsspCJU223ApVxt
      ETIkctltLDXNO29eJiBZbG4fEI2GETyXuq3ys/ffo13KIulx3n7jPDKw9niTg/w2m+vrxEbm
      uHT5MsMRhYVLbzEW17G6LdpilPffeROxXUYJRznI7uOrId56910Ggwrgk9/fZGN1g+2tHeqW
      xNLVNzg1Pc2bv7iKVy6zkysSj8XB6ZIYW+Dc/Ci2ZZMrtnjnZ+8zppl01AjV0hGOC6cvv8PM
      yMmt/tDL9LQF0MIq927eQNaiXJoK4g2mELp1mp5GenQMtV3g+s17TI0O897sPIcHRZLhUSZT
      YT66dpO5MxcQzfZnDTICI/P8amqKwn4GVxSJhsOovkrckIAgQ0NhNPOAa9dvMTc7jujXmJ2d
      IhIJI4sS8XgMfJDCw/zq76ewq1mKdZmIoqLG44joDAynCOgt9stdtFCUITGAgERyaIBkTOKT
      ax8yPjtHSHYJTk2hB6IIgoR6gsuf9DJ9N2gP81/+5To31k9u4d9vOsRzkvB9v68AvUw/DvB8
      9OMAPY5pOVSbJ/dssG3bKNbJ9W3Ztt1XgF7mn6+t9eMAz0lPe4G2N1ZodS1u/ekP5GsdMmsr
      PNnZ/nKDDNOkVDm50dI+L5eetgBxReCgWkeSBEq1JlbHJOh1uH0jgzE4yZgBHXOdj25scPmN
      N5GaOfItkcuvXUQ/uRH6Pj8iPW0BoukEhe0Ngqk5zPIOvhACUeH0pStoTotKPk8gPcb5i1eY
      jIksr27TrhxQap7cDMo+Py49rQCClsQtHxIfG0FuHhEamUBWDQxVQdM0ZFVFlFTKe0/YKXaJ
      R4MogUj/7t/nM/pu0B6mfyDm+fmSAnjeyXVZ9fk6O5kseij6ssV4Ko5tIytPr4bxsnG+6gZt
      NptY1o9T2LbPC8CzUTm535ckukic3AWGJH7lPEAk0i+93Uv85tYmt7c2XrYYT8X3PQTh5G4z
      ff9bCmP5Vol//peb/OI//5KwfJzP0akc0NZSDAROzoc63F3DDqQZf8a6+Z1OB8Mwvnuga3FY
      bpIe/HqDisPDQxLxGKKiIf8FB14qR1uUrChz41H2MnnGJka+Vp7XarVouC4D33JTqjQ6bGTL
      3/v6fT7nqQpwtJtj4eI0hwdVGk6RvWKFVDiIOhzhzo07ZEs2Vy5OsLq2R3x0jphXZOewRmR4
      hiG5zvpehYXzlxhJhH5A8X1y+TKi7jKWDLC3tUnbV1A9i0ByjKjUZTNbYmZuDqtZot5ysewO
      sxOjbG5sYCRGcBtHtAkyN57k4CBL05KZn5tCdm1K1TphVeDg8AAtNkw6KrO+sUO57bLgdDAG
      hjnYWkeNpRlLqGzv5xG0CHMTKXzXYmNtnUByjJgm0GjWCMbThA2Jw3yNarfB3HiYw8M8ybjG
      xnaOkel5ZLNE5rDBWGqQmmsh2Da6Cls7OdKT8yQjXz/x1ucv55sVwPdY39qkg4ob6LAQ8Zg+
      cxEh85CGoDE+PsrgTILS7hqvvfc+q7dv044aXHnjdba3s5RrZZx2ma1s+QdVALeZw1KSaO0i
      TbvLfq6OploYw+Pksvs82XlIueNQ9wys7AMWX/85h+t7GG4dR0sTUmFlP8POXh5V/jlHVZtB
      oUSpNUXq0xyuo50NGBrnaD9DLWeSGJ2hkzugWS0ghhNktnc46u7wy9cmKDqDCJU95iZS7Kwu
      I4RSHG49oSj4eLERzqYk3G6DuiUR9hqUreP1cbdeYXt7nd1yhxGxRktLMuI5PLr5EUuXf0HS
      rLCzuc520eQff3HlB5vPV5GnNMhokZy5zOLcGJurq4iKTiSg0jVCSFaVO3eXCcRHmB6PcuuD
      PxIbniES9FFkmWDQoNuV0QIRIkHtBxV+P3NIt2nS6TQplOtEBwbRVJN0MkGzZRKIJhldHCOS
      iFMSpknHQ2QAWVFp1SpU0XGUILNjMUxLJJlKEzc9rC/s2wQ5wMhwGrtcwjXb1KoVTNsDGczi
      AXJqllTtAB+RVHqEjnecnqwqMvlaBdMFLRBmfmESBagc5qhWqriahbOTB6CQLzJ56gyFoxKj
      U9OsrTxivzzMwtIClfwRrtRgfG6RQrlBs15DNQy6Zj+Y9yLo6ThAt9tBVXXwbEzPR/AEBMFD
      URQsy0H0TPKVJvGBQSRcdF2n3W5j6CqFfB41GMXtNPAlhVAogiAKSL6DL+kookfXchB9D1nX
      sbpdJMGlUKoTjETRZZAUleJRHsUIEg2quKKB73TRdR3fcygc5VFDcQxFQNF1RMA22yAbyIJP
      xzTBB0VwKVTbhMJBJNek2rIZGhzAw8czTQQJytUmoXAERfCQNQ3Lcvlf/+VGPw7wnPS0Arzq
      XLu7QrlzchwSX6UXyqL0FaCH6R+IeT76DTJ6nD/cXOagcXK/vl6wAD2dDg3QqpVwlTCRwPPf
      aXzfYnt1C8+IMD0+jPQUH7/vOexn9kgMjxPUvjyFVqsFwSB/lqbbbiEoOpry9B+C1W6BHkT9
      nquZxzuF/h7gOTm5C8hnwmdt5QlbOxl838fzPDzPp17IUjc/f/zF546bN3762D9+zve9T7s3
      VjkqelDdYe2w9fXX+w4H2QM6jX2yJZdO6YCa5eN73md5VNWdHWpfuF4ht0O50f30sfcFWT7/
      u7S/Td1+mkx9fkh62gL4dg3fGELuNjCtCv/8f/2a8XNXGRbKaGqYa7/+DXU3wM8vTnF98wjN
      93n/57/AKm5xe3kHQdSYHEuwmz1i6cLrDMfB81w8X8C3m/zmn/4/Cn6Cv39ziruP9xmdnaFd
      qFITD9k/DGC0JQYiAe598AnqwARvXVoEjhtk/Ou//juB0dPMJcD3XD789X9lu6zw97+8yp3r
      93Ecias/P8/j28tYXYtTRog/3LiBFEqzOBzmoNnlwoXXGAj3A18/JD2tAPnMLrlcAdHpEhmb
      IKjY5A4LpNMSVrdFs2MhqxJtU+Lc1XeQ8mt4PjiuRyQSRRQ8LFvi3NW3GArp+H4LxzLRBmcZ
      Czkst11EsUPLdYlEYxi6RhuYnJtHSqdRDx/juA6hcAwl+Hl6hSBrhDSB/ewhU4k0ot+hUjHR
      HagjcurCFfR64fh9QxEczaLT7SL4oGoaoqBw5e3LRH7AuqJ9junpTbDrusddCH0fz/exLQtB
      VlBEQBSxuiaCJKFIEr4oIngegigBHpZpIkjKcS6PKCIKAr7v4XkgSSK+72F2TQRJRlWkz8aL
      goAkgeeLCJ4LkoRrW7i+gK6peK4LoohtdvFFGVUSQRCxrS4IErIiH+f9+P5n4xAkFFU5fo0g
      ocgSoiR9LT/oq/TPAzw/Pa0Arzr3Hm9icnKXSK7rIEknd5Hhuv1G2T3NSDLcjwM8B/3CWD3O
      7ZUcGx9sv2wxnkq/UfYPjNkocW95FS0yxNnFWarlEslk8mvjWrUaSjiM+l1fhu+T29smlp7G
      kD22Vx8RGF4gHXuG8wNf4SizTWB4gvC3+P+fl53DKv/R3wM8Fz2tAO1ijfTSaezsDoVqi/3t
      bcIBjUbHJhqL4VttGh2HRv6QuGHg+aBpKq7ZodrsHI9xLLpdm1A0jOBbbK5vMCyESRku2Uqb
      i+M+rVYTkS4HZZHxIZ16s0s4HKJZr6OFIqiiR6vZQtJDhAMavtvhILeN3w1yYSZOo9nAF2R8
      xyYYjePbbZodh3g0hGXbWI5NOV9jbDJNvVrDCEUwm3UENUA4INOot/AklXgk+LKn/CdHTysA
      WDy6dQtdDnB16jj1+mD7MdfubrBw5Q2c4iGh5BCq2ebBnTtMziwynpR4dO8T0PP9RFgAABrn
      SURBVANsZQ38chZ1aIbz0TDdww0G5i9SK5eIxGQ63Q6lzWWeNEVen49QrKhUsk9QQjHSTpRr
      f/wQNzbBhWGJiqnQcWXef+M8rWoZPb1Is7hH46DJ/YM8nXKV9HAYjiYobn3MYa3D5ctvsLN/
      wOLZOcrFCm43T9VSGJ3wefCH35NzA/zjO7PcW2/h+CZ/94t3XvJ8//Q4uQu0Z0Ll9OXLzA5G
      qHRagEO56XPl8lnMZhXkMFPjIyiKSkiXOO6S5GH5MlNTEzjdNuHkKOeXppHwWdnMcrD5mJ3d
      HfRoiumZGRIRg6ULlxkI6eB7eJLB1NQ4nUqJmQuvo/kmohHhzLkzDIQ08H3ymU021lbI7e1T
      7MpMLy4xPT7B0oVTSN0uQiDJe+//jKGIzNjcaaaGBwDomC7jU1OEuwW06Uukoiq+IDG7eJax
      odjLnOifLD3tBrWaZR4+WUcODnD61Cz1ahnMGntlh7GxFIpVY/OgydT4CKFokGqpRnIwSad6
      yMrWIQtnz+J12kRiEQR8yuUKiUSCVrUCegDXsTFwsPQYQVqUmiKqW2Ftt8Ds7CQ7mzvE0iMk
      wxp6IESz0SIWDVOpVIgmEridOrWmTyBm4LQ6hGI69aqH2z5k+6DG/MIsvqgSC8qUSg2iYYXl
      h09ITc9T2t1Aig4xnY5iC0Ecs0Es9mUl6McBnp+eVoBXnX/78D6bhZNbFqUXvEB9Behh+ucB
      no9+HKDH2S/UWc+bL1uMp+I6DpJ8cn9irtPjkWDHsZEkGdu2kGUV33PxAFmSTnRvqhfFjeX9
      /h7gOTm5C7RnYHftCbV2lxu//w+ylSYbj5dZ2d78coOMbou9XOklS9rnpNLTFmA4ZrBdrBMb
      iFKrtnB9gaBd56M//QElkmbS8HHMCh/f2ODylat0S9tUWh4X3nqPuPbTtxB9vpuetgCBVIrq
      5n0C6TM45SegJEGN8M577zEYlOh2OkTSY5w5d4mJhMTGTg5B8LH6NXX6fEpPWwCkCJFAkKF0
      DKmso42nEVsgihKRaBRBV9HkAF79EXuBWeYnR6jaMrrS03rf5wXSd4P2MP/LP33En54UX7YY
      T6XnGmW3221s236ZMvX5HlSr1a9Fh08SjuMgn2A3qPNVN6iiKCc6ctfny4iShHiCT1wJHide
      vq8pgPJZSxuPUrFKIpn47Gyq2ekg6zrSCTZrrxL/fG2jHwd4Tp56u3ebOT6+fodS9/MtwuHu
      Dm3vZG0ZNh7dZnX36JnHHx4+4w/G7rCVOfjGp7a2tqiVjuhYf1lPtYOd+9xZ3gdsHj9e+8Ym
      Qt1ajWypH7/4oXmqfcrsljl3ZY5C9oh6O8tOtcuAodNcf4wWSuMVVri/dsiln/8t+3d+h+uJ
      jF58n8yd/0BJLXJ5XOd31+4zMH2GuJllt+bz7s//htiLPMPtO9S7ILoFvIkY92/coolKQHAI
      jcwzJDd4tJ3n9IVLNA43aFo6gYCE3alx9+4DYqOz2OU9ak6AS0sTrKyt0LYULl+9jOF7dEyT
      Um6Hzcw+emKS6QGJ+8vrWHKYsC4iBbrc/PA2SmKMpWGNO6tZRD3KmxdP4XRqfHLnAcGhKdIh
      iXy5RHpygURQolQVcJw8HkO0mm2axX3uLm8xsXgetZllI9fk9Kk5unaL3d0O8ZDAg+VNRhfO
      MZ2Ov8AJ7PPNFsC32c1ss7a8xnZmDw+ZK2+/TcwQyBcqhEJB6m2HyVSAYrnD4MQCf/3WWRxf
      YWpmFqdZp1CuMTY9RbWYJzU6STIiUa62XqjwZmmHvUKL3N4u1a4J+iBDEZXZxdNYzSK3b9/F
      blfJHJTIZo+YnZ+mmM+T29lgdOl1pgZDtNodKplHZPJNxNg480My1fbn16iVKsxcfB2xW2Ur
      c8CVt99lKKLRKOdpt5q0LI/Ntcc0qyWiE+cwhC4AG+vrzJ2/gtDIkdnNoA9NEA9pWK0Ku9ks
      tdwuB83jiHW70cD1XZaXH9OoNxAlD8u2eXDjQxw9RrfZwHFslh+vvtD56/PUBhk2c5feYzQV
      J5/LgqigSwLRwTHenA+RP6wwkIiSrwcYHQyhugLoMklRonjUITKQJDmocbhxxPzsBK7bwfYN
      ki/09g+5fJOLF5egfkS50sAwDBRVxFAVFFkjmYxRtWUiQR0jNYKhiEiSRDQe55NPPqI8Mkar
      08EwdPBFQiED2VLxP93iSKKIpOgEdBVVVRCsJh99eA3FiBAMS3jdFm3bR9M0BFEiGDDofpr9
      mBqIcvvja8h6hNF4iPRgFAFolAtMLl5kyGhzsJ9DkiTazQauqKCKIqqq0Mju00jNcuHNtyjv
      ruIEXBxkNEWicJAjGI9Rb3Rf6Fy+qvTjAD1M/0DM89NXgB5mbSuDYoRfthhPxbYdFOXkukFt
      u8fToV91YiGdoaGTuynuH4jp84Pywf1d7u8+etliPBXP9xFPcMzI8/3eV4DC/ia2kWJk4PN2
      rK5jgagifc+gtu+3uPa7j/HDCa5cPo8uf/UNfGzLQRRd7n1yn6nFs8TCgS810mgVCjA4yJ8r
      +NTKeUQjRth4+p2wWS4gRgYJfM9vI19p8WAr//1e1OdL9LgC+OwdFJAMi+HEKXK7WxAYQLfK
      iIkJGkcZBCPGcMzgsFjAFQzGR4YQPJvsXgYpPEgiINNu1RGMONFAi/jwOSajRzzJlBmgghgc
      YDQZZn8vgxoZoFOpIbk5it0gqUIWMTCLe5Sj4WpMjw3RyucRkgM0sxk6QhCpU0COB2gW9uiK
      IcbTMYqHh7RdlamJIQrZPfZ29pi6EqeSzSCFkkR1iXa7gRYeIKQr3z0Nff5ieloBvPYRfmAE
      2czT6la4duM+5954B7dZQomkWH/8kIO6w19dPcNOR8HoHpIcHKKZW6fY1nAPHlCJRql0fC6e
      Oa7Ns/bgY3JxhblLw6x9fJ/tqsTfvzNH2QoxGnUolaqMp3Wi0Rjt0iHOQJ78fpnRidHP5TLr
      3PrkLmOLrzEggY/HzuoDHu92+OV//zP29kvotknGsKiWu+iqQmn3CTdv3UdUI5yfTdPRY5yP
      Db6sqX1l6GkF2N/JUjys4XU7BNLjXDi/wObmGgtJHatUJDQ+x1wlh+VIjExMIuVNfEAQwPc8
      fB8QDZaWxgnqCr4PC+ff4PTpQVrFTQ7Sp5mRcziSCJ+2VwIIR6IMiEnUwzwIAoLg430xRUQO
      cPbMIk9WVjEWRwi6ZVxlgrNjZbqIpEfHjhtkeC4+4Houki+xdOEqqUSYTrnCzJmFE1z4/KdD
      T7tB260mmhFEcE06jk/lKIccThLTRURNJ5/dRzbCxEJBUDWwOyhaENG3OcjuI4WSxAMygqKh
      SCK+b9HpCAQCCp5rk93bQzIipJJRDrP7KOEkAVnEMCQsV0Gw2oihIM38AQ1XZXJk8LhJnqFR
      zu3jKBEGIxrIGuXDPTwxQGIofpwl6dgIhkYhu48vBxgaSpDf38NTQwxEAmjBIN9VVrcfB3h+
      eloBXnX+eOsxR82T+/V5rot4gtukev1G2b1NvzDW89FvlN3jfHjnCaX2yfWz9xtl/8A4ZpuD
      owKSFiI1mKDbaRMMfr2GvtXtImnadx/k8X3qtTJ6OIEi+lQKhyjhQcLG93dFNitllEgM7fsG
      I74HDzaO+nuA56Snzz82clnynQ4HmQ2KtTaPHz/+xnFHmR2ax7XRvxUfl7s3r5HL13C6bda3
      dz/z/GA3yR7Vnk0wz2LtwQ1W955xPA4H2SP+suM1fZ6HnrYA4HK4l0GXg8zrx2vNneWb3H6y
      z9KVN+jsrdGWQgyFNOobT8iH0syNDfD49kccNkwSo3N4hW1acoK337yAV94mPnGRcqmIXGuy
      mz0gKt/jT/UuF+aHOKoFKe08oGQKLMxPcff6xyipWeaiJjuHTYTgIH/11nm6tTLa+Fk6xV3q
      coVrK+t0WyaJiExs7DXM3H0ypSavXbrE2uY26clJ3HoHr3vE450Sc6cX2fz4OlU1zl9fGubD
      T7K4isx/93c/e8nz/dOjpy0AaFx6+11ODceotNqAS7XpMDGSpJTfxzHSvPPGJQzJ5ahQIRQO
      InguTU/n/ffeoVs9QgsP8vYb55GBtZVtcrkNtjY3iY3McenyZUbiOkuvvc1YIoBrm3TlKO+9
      8yZCq0JyfJpGuYCgR3jrvXdJRTTA5yi7ycbKGrs7u9RshTOvv8npuTne/MXrCPUa+YbF3Nwc
      quiSmjrNuflRPNcjX+ny9vvvMaa2ITmJbzZxfZFzV95hfuzrvc/6PD89bQH0qM6DWx+jGHEu
      ToeQhkcRujV2SxaT42OonSLXbz9gdnyUN+fCFI4qeNER5sYSXL/xCYvnL0O39WnClk9s8jRn
      x8YoH+bwJIl4NIrmGyR0CQgznBbRbY/rN26zMD+Fe7jFwsIssVgIRZJIJhPggxaf5FdnxnDq
      R5TqImFVw0gOIGEwNJYmGu6yc9RidHSEtBhAQCI9PEQiJnP3xjXG5k8RJkd4egYjFEcSJAyh
      rwA/BH0vUA/zv//6Jp9sP+s+48en5wpj9ekt+nGA56N/HqDHabQtrEL9ZYvxVBzbRlZObjar
      Y9t9Behlfn2zXxjreelpL9DW6jKNjsn13/+Gw2qb7SfLLG9uYH5a/rx2lKVhdimUTu5dss/L
      pactwIAhc1Cpoxsa5VoT23IICia3rn+IlhxnXPcxzQ2u3djg8utvQD1LsQUXr14h2NOfvM+L
      oqctQCQ9QHF7jWBqHqu8hS9EQNS4cOV1gr5JvVwmmB7j/MUrTMZFVjYydFtl6q1+g4w+x/S0
      AghqErFVZWB0GK1bIzo2gaoH0FQZI2CgBQJIkkYtu8pOySIZDyFrQbSTm5/V50em7wbtYfoH
      Yp6fLymA4zh4Xj8lq1c4OMwTjvYbZPylfK1BRrfb7XeI6SF8z0HwTu73Jfouwgkrp/9FRP9b
      ToT5vofruAiShPSFrjGe5x13kfF9PM/FR0T6AXPe+zyd/+2fr/HRavlli/Et+MDJTYWApxbG
      8tl8eIts1SY1McfiVPqzZ27fvs305DiRWJw7Nz5kaO4Ss6MDT72EYzYpNRxSyR/GVGc3H2MH
      R5hKP9v7NxoNwuFnqKfpmORKDUZSX09Cy+VyJGIRJC2IIn3/L7h0sE6hG2NxOs729gFT0+Nf
      +5lYzSY112UwGn3q+zQ7Fofl5ve+fp/P+WYFcNvU3Ajvv7eEILg8/uQ6Rx147fJVAFqNGm63
      wc5RlcRIid//9h4YES4vDnL3wT4Tp0bZurOJrSq8+fppmm2X1vIn7OQ7nH3tMkORwAsS3+Oo
      XEdsC/ipIJuPH9PwVTSvS3h4lgG5xfJWnqWzZzBrR1TqLogOQUPhyaNHBIcmcapZGoQ5NzPM
      bmabuqlw9swCiudQqTcJKz67exmM5CTjcZmHj1ZpeipLvomRkHiy/BAtOc7MoMbqVhaMOGfn
      xvDdLsv3HxEcniFpCFRrZcKD48QCMvlCk6rVgukoxUKJobjK8uouk6fOoXSO2NivMjc1TsO1
      oNvF0ODJ6g7jp86Rjr2ouesDT3ODijKCa+F4Hk63QanWppbPka8dN7jotFsEB0Y5f+ESg36d
      kcvvMxWSKbZbpKbPMpkKMDJznrOTKUzbpNNtUyrXMGt59govLnvRqe/T9MKYtSJ1q0upAbJd
      J54aoXSU5fqHH1HIbfFo44CH9+4xMJyiXCyS3XyMkZpnKKJSrVbZffgxO4dlSo5BUmlQ+kKD
      jMLeLtGJORr5HCsra8ycPkcsqNCsFOiaJpVKnXt3PqGW38MMjNKtHZcq3HqyTHR8ltr+Khur
      K1T9AGFdwenUKDUd1HaFgnm8+jRbDaq1MrfvPmBvewdPFPBch4c3PqDm6ljtJrVqmdt3T24d
      0F7lmy2AoDGZDvDRn/7E8NQ0hqYSH0oT0mS8WAxDEZFliXAwQGwwyePrH+EH4lwMx2l7AQQB
      IhERXQghqTrhoAy6Rig+RCyovTDh9/cKaIqEb3kUy3VCkSiaqpMIBymX64SjcQZigyQHI9SY
      Iv7ptXUjwP7eJm48SsuB1EAQ2xaJJ+IEzA7WF3ZFgmwwEI/SzEn4psP25gYt0yMcAKtyhGXE
      ifplQCSeSNDpHvcVCwR0dne2sE2BRDjE9NQwElAuHeD4AlJQZX/n2IVZyheIDY1QqzZIplKs
      rD7hIJhi8dxZyrkMjtIiPJDGa5vUyiX0UIh2x3ph8/gq09NxANuykBQFwXOxfcAHAR9ZknBc
      F8FzqLe6BMNhRHwURcE0TVRFplGvI2kBfLuDL8romg6iiOi7ICpIgofteAh4iIqKa9uIeNSb
      HTTDQBFBlGWatTqiqhHQZDxBBddCUVV836VeqyPrx4E3UVERAde28CUFSfCxbQffB0nwaLQt
      dF1F9Bxapks0EsIHPNsGEVotE93QkQQfSVZwXJf/+f+51o8DPCc9rQCvOrcfrtN0TnC6sesg
      n+A+wY7bb5DR00ykov0DMc9B/0BMj3Nv45DMzf2XLcZTcT3vSzGkk4breb2vAI3SIbYWJxF6
      /s2173d5fPcxfjDO0vzUlxpffGmc57C5tk5qao7wV+r3m/U6RCL8WZp2s46oBtDVp091t1lH
      MCLfO0lvY7/c3wM8JydXPZ8Jn43NTTK7u/i+T6fdomNaVA93qXW948ddC9916XTatLsmvn8c
      5e60W3QtG891sawutuMBdbpujLhf5Em2QafVpGNan403LZP93X3qxU2Omgqd/D5Vy8Pqdmh3
      TABqe3vUfR/z0+uVDveoNE267RbtjonneXQ7bVrtLv6n4w53tmg4/mcyuY6DZXZx3H5e1g9N
      T1sA36rgG2kUq07XqvAv//e/M3PxDZJeAc2Ic+OD31KxVH5xaZZP9qvors2b775PN7/Jw60C
      uB4jw3H2jyqcufAagxFoVIoonokW6vCn3/yRAzvCr96a5vF2mdHpcWpHJUy9TKUS4qjrEIuF
      eXjnEaGhcS6dngWOG2T89t9+Q2TyHFMR8D2XWx/8O5sFkV/+6g0effIEbIEzby2y8Wgbt9th
      IrTJ7z6+hRgY5PRYjILpc+Hc+RfqNu7zdXraAuR3d9nf32RzN0OpDpevXqRZyeO40KxUGZhZ
      ZDgMHUti8cIVZscG8HzodNqMz50lFYKOo3D2tSsMRQ0ANCNIeu4co3qL2MR5hlSPaqfN1OIF
      JoaO0y1GJiY5tXSGiK5gWx2iqWnOzI1/JpcgG5y7eBG/mqcNeF4FKTTHTFSjicjs0nnOTKWp
      ddqMzSwxPZKgUasyduoiV84vIIkql1+/0v/x/wj0tAVQB8b5+5mLCFaTmuVSKBcZHJ1lKCIh
      hsI07mcZnFpiYHAA35AQhobRJBieOsXy/bsogwvMxjUk7c/r+DCnzoRJJAxcW0ex7zB+apHJ
      6RGe3L2LNTzDxNQoiqEyKKtI6gRSYoB88RH3V22unpsjPDyML0CxWiYyMsHIYBhRDVIL5HAi
      cwwGIwiaiByUiUeDrN+7i6cl/v/27vSpqSuM4/j3brlZgCxssiMIKhaHKgg6KtN37XT6D/Z/
      6Ju272xltaUqUUZlTQgQ9iUJ2XOT3NsX9EVf6IilTrjmfF7fyTxzZ37znHtOzjn0D3Sz9nqe
      eFqju70d5we+P4T/l1gHsLFfJoMs7+crXcYHWaaJdIlngSzTFAGwM3Ew1sWIdQCbO4hn2D29
      vNOgttsRZjeWZVIul0GSUWQZy7LONuu85zmQPn5OpWVh/qttm2YZSVKQ/8N43CyXkWT5s56N
      ObOwKdYBLujyDtDOIbGxym+zMzydmOI4lWd+fv69z22vrZI81wUZFlNPfiZ6mKFcyDIz8YSD
      03/G2J9yQYZVIvj0V97tnXezirggo1Js3QFAQlYUXA4XDvVsGXU3/JaVaIzegUHS0SWODY2m
      Gg/S0TbHpoeetnoii0E2Dk9p6x3EPIkQM1yMjt5GymxT1zxAPH6MHE9wmMzRuh1maTFF/9Vm
      krkasgcv2EkUuH6jj/DiEs7GTpodKcLRGA5/Kw++vk4xnUDvGqCwv0la8fF8aRnDsPA4LJqv
      jSAnIuzEM9zs6yO0HqGmqRmHYaJLKV4tR+kZuMnhyjIFp4+hXi9zwU1M3cW346MVft9fHlt3
      ANDo/+o2HX43qXweMDk5SVDKpYlElklLDTwcvYtbzjK/sIY/4EMySxxnJcYfPya+v45h6YwM
      D6IC4ber7J5ss7qyhr/t7IKMKx6Ttht3aPNppJNJEmU3jx7eR8nFyJdNQqEQRTRGHtzH6wCw
      ONxZJ7QcJhQKk85bXBsa5mprC/fG71A4OOTtSphyqUQ2k8QRaGewt4VMOktkN8bD8XE63GVi
      +TIbGxEMw6Bv8B4dDTWVfdVfKFt3AM2lEnodRFXcDHU58Xp9yIUUeo1CQ2MbjswBz/4K0nml
      iW8e97K7vYOvr4sWr8rMzCyd12+jFXOoytkFGQQ6+WGsn91ICMOScLtcqJZMwKMjSU58ATd6
      Lsrsszl6ulpRVY321gbcnlpURaG2tgYsKKk+vvv+HsZxhKOkgtehodTVoUgOvPX19NHOUcbE
      6fHQJNciSQpeXx2NPh9/zkzT3dONS1NpbW3B4azBLako59nHLHwyMQ1qYz/+NM3vbw4rXYat
      iQDYmFgHuBjDMOz+DSAIFyM6gI1NzC2wdXh5zwW6/MdiiQDYWrFYRLvEVxDZoT4xBLKxy3wD
      I9ijPtEBhKomOoBQ1UQA7Myy2N9YZmrqD07zH/+v0+d2vLnCxOQk79b3OD3YYGpylv1EluRR
      lOmpKXZi2Y//yGdQKmRYeTXHfhpMI8PzZ9O8WYtSKqREAOzMKhfZPskxNnyN0OpmpcthN57l
      0fg4t3paCG8dMDo2SHR9g8jmPsNjI+ysr1WkLsuCKz4H8RzsrodovXUXOXPA+uKqvf8KUe0s
      y0J3udDd9UilvUqXg98tMzPxFHdjN7rDiVOvRaEAmo5Ld6HKlelSmtNDjftsf3XWUuhw6xRc
      OslYQQTAziRFoZg8IvjyGL1hoNLlYMoaTY31JI0CmpQhGHyB5WrBVdwjGJynrPkrUlc+EycS
      3mJL1RlqVHn5egGKZW50eMUskN0V8xkSaYP6eh9yhacdi/kM8WSWOn8AjRKxRBpfwI9sFYnH
      U3gDAbQK3CZUMnLE4kksWSHg95M5jaO66/A4VREAobqJj2ChqokACFVNBECoaiIAQlUTARCq
      mgiAUNVEAISqJgIgVDURAKGqiQAIVU0EQKhqfwOejH05ZsF/KAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='High Median Age States' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='ID Sets' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='ID Sets on Map' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Table Calculations' width='192'>
      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
      7XdBcYLNNKUJmAAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
